---
__load__:
- bin/generator/records_v2/msdk/projects/sdk_example/common/lpc/driver_example_lpc.yml
- bin/generator/records_v2/msdk/projects/sdk_example/common/kinetis/driver_example.yml

__hierarchy__:
  tmp_demo_app_mcx_settings:
    section-type: application
    remove_components:
    - driver.power driver.sim driver.power_no_lib driver.lpc_iocon driver.lpc_gpio driver.flexcomm_usart
      driver.lpc_crc
    configuration:
      tools:
        __common__:
          config:
            __common__: {}
            debug:
              cc-define:
                DEBUG:
              cx-define:
                DEBUG:
        iar:
          config:
            __common__:
            release: {}
        mdk:
          config:
            release: {}
    modules:
      boardset:
        required: true
        cc-include:
        - path: boards/${board}
          package_path: project-root-path
          project_path: board
        files:
        - source: boards/${board}/board.c
          package_path: project-root-path
          project_path: board
        - source: boards/${board}/board.h
          package_path: project-root-path
          project_path: board
        - source: boards/${board}/clock_config.c
          package_path: project-root-path
          project_path: board
        - source: boards/${board}/clock_config.h
          package_path: project-root-path
          project_path: board
      device_configuration_data:
        required: false
        cc-include:
        - path: boards/${board}
          package_path: project-root-path
          project_path: board
        files:
        - source: boards/${board}/dcd.c
          package_path: project-root-path
          project_path: board
        - source: boards/${board}/dcd.h
          package_path: project-root-path
          project_path: board
      readme:
        files:
        - source: project-root-path/readme.txt
          toolchains: iar mdk mcux armgcc
          project_path: doc
      pinset:

# dac_1_basic:
#   configuration:
#     document:
#       __replace__:
#       name: dac_basic

# dac_1_buffer_interrupt:
#   configuration:
#     document:
#       __replace__:
#       name: dac_buffer_interrupt

# vref_1_example:
#   configuration:
#     document:
#       __replace__:
#       name: vref_example

mcxromapi_flashiap:
  configuration:
    tools:
      __common__:
        config:
          __common__: {}
    document:
      name: flashiap
      readme:
      - boards/${board}/driver_examples/romapi/flashiap/board.readme
      - platform/drivers/mcx_romapi/example/flashiap/flashiap.readme
      category: driver_examples
      brief: The FLASIAP project is a simple demonstration program of the SDK FLASIAP
        driver. It erases and programs a portion of on-chip flash memory. A message
        a printed on the UART terminal as various operations on flash memory are performed.
    outdir: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}
  modules:
    demo:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/flashiap
        package_path: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}
        project_path: board
      files:
      - source: platform/drivers/mcx_romapi/example/flashiap/flashiap.c
        merge-to-main: main
        package_path: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}
        project_path: source
      - source: boards/${board}/driver_examples/romapi/flashiap/pin_mux.c
        package_path: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}
        project_path: board
      - source: boards/${board}/driver_examples/romapi/flashiap/pin_mux.h
        package_path: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}
        project_path: board
    pinset:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}
        project_path: "${board}/driver_examples/romapi/flashiap/${multicore_foldername}"
      files:
      - source: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}/hardware_init.c
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/flashiap/${multicore_foldername}"
      - source: boards/${board}/driver_examples/romapi/flashiap/${multicore_foldername}/app.h
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/flashiap/${multicore_foldername}"
  section-type: application
  __requires__:
  - driver.flashiap
mcxromapi_flexspi_nor:
  configuration:
    tools:
      __common__:
        config:
          __common__: {}
    document:
      name: flexspi_nor
      readme:
      - boards/${board}/driver_examples/romapi/flexspi_nor/board.readme
      - platform/drivers/mcx_romapi/example/flexspi_nor/flexspi_nor.readme
      category: driver_examples
      brief: The FLASIAP NOR project is a simple demonstration program of the SDK FLASIAP NOR
        driver. It erases and programs a portion of external Nor flash connected with FLEXSPI.
        Some simple flash command willbe executed,such as Write Enable, Erase sector, Program page.
        Example will first erase the sector and program a page into the flash, at last check if
        the data in flash is correct.
    outdir: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}
  modules:
    demo:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/flexspi_nor
        package_path: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}
        project_path: board
      files:
      - source: platform/drivers/mcx_romapi/example/flexspi_nor/flexspi_nor.c
        merge-to-main: main
        package_path: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}
        project_path: source
      - source: boards/${board}/driver_examples/romapi/flexspi_nor/pin_mux.c
        package_path: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}
        project_path: board
      - source: boards/${board}/driver_examples/romapi/flexspi_nor/pin_mux.h
        package_path: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}
        project_path: board
    pinset:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}
        project_path: "${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}"
      files:
      - source: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}/hardware_init.c
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}"
      - source: boards/${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}/app.h
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/flexspi_nor/${multicore_foldername}"
  section-type: application
  __requires__:
  - driver.flashiap
mcxromapi_mem_interface:
  configuration:
    tools:
      __common__:
        config:
          __common__: {}
    document:
      name: mem_interface
      readme:
      - boards/${board}/driver_examples/romapi/mem_interface/board.readme
      - platform/drivers/mcx_romapi/example/mem_interface/mem_interface.readme
      category: driver_examples
      brief: The mem_interface project is a simple demonstration program of the SDK IAP
        driver. It erases and programs a portion of internal and external flash memory. A message
        a printed on the UART terminal as various operations on flash memory are performed.
    outdir: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}
  modules:
    demo:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/mem_interface
        package_path: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}
        project_path: board
      files:
      - source: platform/drivers/mcx_romapi/example/mem_interface/mem_interface.c
        merge-to-main: main
        package_path: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}
        project_path: source
      - source: boards/${board}/driver_examples/romapi/mem_interface/pin_mux.c
        package_path: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}
        project_path: board
      - source: boards/${board}/driver_examples/romapi/mem_interface/pin_mux.h
        package_path: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}
        project_path: board
    pinset:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}
        project_path: "${board}/driver_examples/romapi/mem_interface/${multicore_foldername}"
      files:
      - source: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}/hardware_init.c
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/mem_interface/${multicore_foldername}"
      - source: boards/${board}/driver_examples/romapi/mem_interface/${multicore_foldername}/app.h
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/mem_interface/${multicore_foldername}"
  section-type: application
  __requires__:
  - driver.mem_interface
mcxromapi_runbootloader:
  configuration:
    tools:
      __common__:
        config:
          __common__: {}
    document:
      name: runbootloader
      readme:
      - boards/${board}/driver_examples/romapi/runbootloader/board.readme
      - platform/drivers/mcx_romapi/example/runbootloader/runbootloader.readme
      category: driver_examples
      brief: The runbootloader project is a simple demonstration which run into the bootloader
        with the user parameter. The demo forces the device run into the ISP mode with the specific peripheral.
    outdir: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}
  modules:
    demo:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/runbootloader
        package_path: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}
        project_path: board
      files:
      - source: platform/drivers/mcx_romapi/example/runbootloader/runbootloader.c
        merge-to-main: main
        package_path: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}
        project_path: source
      - source: boards/${board}/driver_examples/romapi/runbootloader/pin_mux.c
        package_path: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}
        project_path: board
      - source: boards/${board}/driver_examples/romapi/runbootloader/pin_mux.h
        package_path: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}
        project_path: board
    pinset:
      required: true
      cc-include:
      - path: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}
        project_path: "${board}/driver_examples/romapi/runbootloader/${multicore_foldername}"
      files:
      - source: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}/hardware_init.c
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/runbootloader/${multicore_foldername}"
      - source: boards/${board}/driver_examples/romapi/runbootloader/${multicore_foldername}/app.h
        merge-to-main: sub
        project_path: "${board}/driver_examples/romapi/runbootloader/${multicore_foldername}"
  section-type: application
  __requires__:
  - driver.runbootloader

